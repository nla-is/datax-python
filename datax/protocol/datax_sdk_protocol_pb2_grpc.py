# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import datax_sdk_protocol_pb2 as datax__sdk__protocol__pb2


class DataXStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Initialize = channel.unary_unary(
                '/datax.sdk.protocol.v1.DataX/Initialize',
                request_serializer=datax__sdk__protocol__pb2.Settings.SerializeToString,
                response_deserializer=datax__sdk__protocol__pb2.Initialization.FromString,
                )
        self.Next = channel.unary_unary(
                '/datax.sdk.protocol.v1.DataX/Next',
                request_serializer=datax__sdk__protocol__pb2.NextOptions.SerializeToString,
                response_deserializer=datax__sdk__protocol__pb2.NextMessage.FromString,
                )
        self.Emit = channel.unary_unary(
                '/datax.sdk.protocol.v1.DataX/Emit',
                request_serializer=datax__sdk__protocol__pb2.EmitMessage.SerializeToString,
                response_deserializer=datax__sdk__protocol__pb2.EmitResult.FromString,
                )


class DataXServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Initialize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Next(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Emit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataXServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Initialize': grpc.unary_unary_rpc_method_handler(
                    servicer.Initialize,
                    request_deserializer=datax__sdk__protocol__pb2.Settings.FromString,
                    response_serializer=datax__sdk__protocol__pb2.Initialization.SerializeToString,
            ),
            'Next': grpc.unary_unary_rpc_method_handler(
                    servicer.Next,
                    request_deserializer=datax__sdk__protocol__pb2.NextOptions.FromString,
                    response_serializer=datax__sdk__protocol__pb2.NextMessage.SerializeToString,
            ),
            'Emit': grpc.unary_unary_rpc_method_handler(
                    servicer.Emit,
                    request_deserializer=datax__sdk__protocol__pb2.EmitMessage.FromString,
                    response_serializer=datax__sdk__protocol__pb2.EmitResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'datax.sdk.protocol.v1.DataX', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataX(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Initialize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datax.sdk.protocol.v1.DataX/Initialize',
            datax__sdk__protocol__pb2.Settings.SerializeToString,
            datax__sdk__protocol__pb2.Initialization.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Next(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datax.sdk.protocol.v1.DataX/Next',
            datax__sdk__protocol__pb2.NextOptions.SerializeToString,
            datax__sdk__protocol__pb2.NextMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Emit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datax.sdk.protocol.v1.DataX/Emit',
            datax__sdk__protocol__pb2.EmitMessage.SerializeToString,
            datax__sdk__protocol__pb2.EmitResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
